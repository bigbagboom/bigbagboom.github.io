<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>全是转载 - IT,Network</title><link href="https://www.zeusinolympia.eu.org/" rel="alternate"></link><link href="https://www.zeusinolympia.eu.org/feeds/itnetwork.atom.xml" rel="self"></link><id>https://www.zeusinolympia.eu.org/</id><updated>2022-02-21T15:42:00+08:00</updated><entry><title>利用 ipset 封禁大量 IP</title><link href="https://www.zeusinolympia.eu.org/li-yong-ipset-feng-jin-da-liang-ip.html" rel="alternate"></link><published>2022-02-21T15:42:00+08:00</published><updated>2022-02-21T15:42:00+08:00</updated><author><name>bbb</name></author><id>tag:www.zeusinolympia.eu.org,2022-02-21:/li-yong-ipset-feng-jin-da-liang-ip.html</id><summary type="html">&lt;p&gt;看日志发现家里的路由器上偶尔会有奇怪的ip地址尝试登录，一开始我也不在意，毕竟对自己设置的密码还是有点信心的，但今天下午 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;看日志发现家里的路由器上偶尔会有奇怪的ip地址尝试登录，一开始我也不在意，毕竟对自己设置的密码还是有点信心的，但今天下午突然看到某个固定ip一刻不断地反复尝试，估计是某个程序在用暴力字典破解的方式干坏事，虽然我还是有信心它找不出我的密码来，但让它那么干显得我很弱，事实上我确实很弱，对于这种攻击我是毫无反抗经验的。于是我上网搜了一下，搬到这里算是留个记录。&lt;/p&gt;
&lt;p&gt;以下又是网上搬来的，原文&lt;a href="https://www.openwrt.pro/post-418.html"&gt;在此&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用 iptables 封 IP，是一种比较简单的应对网络攻击的方式，也算是比较常见。有时候可能会封禁成千上万个IP，如果添加成千上万条规则，在一台注重性能的服务器或者本身性能就很差的设备上，这就是个问题了。ipset 就是为了避免这个问题而生的。&lt;/p&gt;
&lt;p&gt;关于 iptables，要知道这两点。&lt;/p&gt;
&lt;p&gt;iptables 包含几个表，每个表由链组成。默认的是 filter 表，最常用的也是 filter 表，另一个比较常用的是 nat 表。一般封 IP 就是在 filter 表的 INPUT 链添加规则。&lt;/p&gt;
&lt;p&gt;在进行规则匹配时，是从规则列表中从头到尾一条一条进行匹配。&lt;/p&gt;
&lt;p&gt;这像是在链表中搜索指定节点费力。ipset 提供了把这个 O(n) 的操作变成 O(1) 的方法：就是把要处理的 IP 放进一个集合，对这个集合设置一条 iptables 规则。像 iptable 一样，IP sets 是 Linux 内核中的东西，ipset 这个命令是对它进行操作的一个工具。&lt;/p&gt;
&lt;p&gt;简单的流程
可以用这几条命令概括使用 ipset 和 iptables 进行 IP 封禁的流程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset create vader hash:ip  
iptables -I INPUT -m set --match-set vader src -j DROP  
ipset add vader 4.5.6.7  
ipset add vader 1.2.3.4  
ipset add vader ...  
ipset list vader # 查看 vader 集合的内容&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面分别对各条命令进行描述。&lt;/p&gt;
&lt;p&gt;创建一个集合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset create vader hash:ip&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这条命令创建了名为 vader 的集合，以 hash 方式存储，存储内容是 IP 地址。&lt;/p&gt;
&lt;p&gt;添加 iptables 规则&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iptables -I INPUT -m set --match-set vader src -j DROP&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果源地址(src)属于 vader 这个集合，就进行 DROP 操作。这条命令中，vader 是作为黑名单的，如果要把某个集合作为白名单，添加一个 ‘!’ 符号就可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iptables -I INPUT -m set ! --match-set yoda src -j DROP&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到现在虽然创建了集合，添加了过滤规则，但是现在集合还是空的，需要往集合里加内容。&lt;/p&gt;
&lt;p&gt;找出“坏” IP&lt;/p&gt;
&lt;p&gt;找出要封禁的 IP，这是封禁过程中重要的步骤，不过不是这里的重点。简要说明一下两种方法思路。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;netstat -ntu | tail -n +3 | awk '{print $5}' | sort | uniq -c | sort -nr &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接通过 netstat 的信息，把与本地相关的各种状态的 IP 都计数，排序列出来。&lt;/p&gt;
&lt;p&gt;或者从 nginx 或者其他 web server 的日志里找请求数太多的 IP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;后半部分，排序，去重，再按次数进行逆向排序的操作，跟上面命令是一样的。&lt;/p&gt;
&lt;p&gt;找出“坏” IP，往之前创建的集合里添加就可以了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset add vader 4.5.6.7&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有多少“坏” IP，就添加多少 IP，因为针对这些封禁的 IP 只需要一条 iptables 规则，而这些 IP 是以 hash 方式存储，所以封禁大量的 IP 也不会影响性能，这也是 ipset 存在的最大目的。&lt;/p&gt;
&lt;p&gt;ipset 更多的用法&lt;/p&gt;
&lt;p&gt;存储类型&lt;/p&gt;
&lt;p&gt;前面例子中的 vader 这个集合是以 hash 方式存储 IP 地址，也就是以 IP 地址为 hash 的键。除了 IP 地址，还可以是网络段，端口号（支持指定 TCP/UDP 协议），mac 地址，网络接口名称，或者上述各种类型的组合。&lt;/p&gt;
&lt;p&gt;比如指定 hash:ip,port就是 IP 地址和端口号共同作为 hash 的键。查看 ipset 的帮助文档可以看到它支持的所有类型。&lt;/p&gt;
&lt;p&gt;下面以两个例子说明。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hash:net
ipset create r2d2 hash:net  
ipset add r2d2 1.2.3.0/24  
ipset add r2d2 1.2.3.0/30 nomatch  
ipset add r2d2 6.7.8.9  
ipset test r2d2 1.2.3.2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hash:net 指定了可以往 r2d2 这个集合里添加 IP 段或 IP 地址。&lt;/p&gt;
&lt;p&gt;第三条命令里的 nomatch 的作用简单来说是把 1.2.3.0/30 从 1.2.3.0/24 这一范围相对更大的段里“剥离”了出来，也就是说执行完 ipset add r2d2 1.2.3.0/24 只后1.2.3.0/24 这一段 IP 是属于 r2d2 集合的，执行了 ipset add r2d2 1.2.3.0/30 nomatch 之后，1.2.3.0/24 里 1.2.3.0/30 这部分，就不属于 r2d2 集合了。执行 ipset test r2d2 1.2.3.2 就会得到结果 1.2.3.2 is NOT in set r2d2.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hash:ip,port
ipset create c-3po hash:ip,port  
ipset add c-3po 3.4.5.6,80  
ipset add c-3po 5.6.7.8,udp:53  
ipset add c-3po 1.2.3.4,80-86&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二条命令添加的是 IP 地址为 3.4.5.6，端口号是 80 的项。没有注明协议，默认就是 TCP，下面一条命令则是指明了是 UDP 的 53 端口。最后一条命令指明了一个 IP 地址和一个端口号范围，这也是合法的命令。&lt;/p&gt;
&lt;p&gt;自动过期，解封&lt;/p&gt;
&lt;p&gt;ipset 支持 timeout 参数，这就意味着，如果一个集合是作为黑名单使用，通过 timeout 参数，就可以到期自动从黑名单里删除内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset create obiwan hash:ip timeout 300  
ipset add obiwan 1.2.3.4  
ipset add obiwan 6.6.6.6 timeout 60&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面第一条命令创建了名为 obiwan 的集合，后面多加了 timeout 参数，值为 300，往集合里添加条目的默认 timeout 时间就是 300。第三条命令在向集合添加 IP 时指定了一个不同于默认值的 timeout 值 60，那么这一条就会在 60 秒后自动删除。&lt;/p&gt;
&lt;p&gt;隔几秒执行一次 ipset list obiwan 可以看到这个集合里条目的 timeout 一直在随着时间变化，标志着它们在多少秒之后会被删除。&lt;/p&gt;
&lt;p&gt;如果要重新为某个条目指定 timeout 参数，要使用 -exit 这一选项。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset -exist add obiwan 1.2.3.4 timeout 100&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样 1.2.3.4 这一条数据的 timeout 值就变成了 100，如果这里设置 300，那么它的 timeout，也就是存活时间又重新变成 300。&lt;/p&gt;
&lt;p&gt;如果在创建集合是没有指定 timeout，那么之后添加条目也就不支持 timeout 参数，执行 add 会收到报错。想要默认条目不会过期（自动删除），又需要添加某些条目时加上 timeout 参数，可以在创建集合时指定 timeout 为 0。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset create luke hash:ip  
ipset add luke 5.5.5.5 timeout 100  
# 得到报错信息 kernel error received: Unknown error -1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更大！&lt;/p&gt;
&lt;p&gt;hashsize, maxelem 这两个参数分别指定了创建集合时初始的 hash 大小，和最大存储的条目数量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset create yoda hash:ip,port hashsize 4096 maxelem 1000000  
ipset add yoda 3.4.5.6,3306&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样创建了名为 yoda 的集合，初始 hash 大小是 4096，如果满了，这个 hash 会自动扩容为之前的两倍。最大能存储的数量是 100000 个。&lt;/p&gt;
&lt;p&gt;如果没有指定，hashsize 的默认值是 1024，maxelem 的默认值是 65536。&lt;/p&gt;
&lt;p&gt;另外几条常用命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipset del yoda x.x.x.x    # 从 yoda 集合中删除内容  
ipset list yoda           # 查看 yoda 集合内容  
ipset list                # 查看所有集合的内容  
ipset flush yoda          # 清空 yoda 集合  
ipset flush               # 清空所有集合  
ipset destroy yoda        # 销毁 yoda 集合  
ipset destroy             # 销毁所有集合  
ipset save yoda           # 输出 yoda 集合内容到标准输出  
ipset save                # 输出所有集合内容到标准输出  
ipset restore             # 根据输入内容恢复集合内容&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还有……&lt;/p&gt;
&lt;p&gt;如果创建集合是指定的存储内容包含 ip, 例如 hash:ip 或 hash:ip,port ，在添加条目时，可以填 IP 段，但是仍然是以单独一个个 IP 的方式来存。&lt;/p&gt;
&lt;p&gt;上面所有的例子都是用 hash 的方式进行存储，实际上 ipset 还可以以 bitmap 或者 link 方式存储，用这两种方式创建的集合大小，是固定的。&lt;/p&gt;
&lt;p&gt;通过 man upset 和 ipset —help 可以查到更多的内容，包括各种选项，支持的类型等等。&lt;/p&gt;
&lt;p&gt;&lt;a href="/"&gt;回主页&lt;/a&gt;&lt;/p&gt;</content><category term="IT,Network"></category></entry><entry><title>关于Linux中邮件的折腾</title><link href="https://www.zeusinolympia.eu.org/guan-yu-linuxzhong-you-jian-de-zhe-teng.html" rel="alternate"></link><published>2022-02-16T15:42:00+08:00</published><updated>2022-02-16T15:42:00+08:00</updated><author><name>bbb</name></author><id>tag:www.zeusinolympia.eu.org,2022-02-16:/guan-yu-linuxzhong-you-jian-de-zhe-teng.html</id><summary type="html">&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;作为一个拥有域名(免费的)的资(菜)深(鸟)网民，我自豪地租用了云vps(免费的)用于架站，也就是本站，以年均一到三篇的频 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;作为一个拥有域名(免费的)的资(菜)深(鸟)网民，我自豪地租用了云vps(免费的)用于架站，也就是本站，以年均一到三篇的频率发布日志。我觉得这样也算是颇为佛系。然而，某一天我突然想到，域名虽然是网站的门牌，但它不是更该是邮件的标识么？这么多年来，我从没想过以这些属于我的域名作为邮件地址后缀，理由其实并不复杂。首先，我拥有很多免费邮箱，但用处并不大，现在已经很少需要用到个人邮箱与人交流。其次我的这些域名都是免费域名，现在属于我但未必永远属于我，从一开始我就有失去的心理准备，所以也就不会将它们和自己绑定的过于紧密。最后但并非最不重要的一点，在免费vps上设置自己域名的邮件服务也是有技术门槛的。&lt;/p&gt;
&lt;p&gt;然而最近，cloudflare的免费服务中新增了邮件路由功能，也就是说，你托管在cf上的域名可以通过设置邮件路由将发往你的域名后缀的邮箱转发到你指定的其他邮箱。但只能通过它收，不能通过它发。说实话我是觉得这个功能非常鸡肋，但我还是试着用了，然后作为强迫症中期，就觉得既然我能收这个地址的邮件但不能以这个邮箱地址发邮件这显然不对啊。&lt;/p&gt;
&lt;p&gt;于是问题就来了。我这个架站的vps因为是免费的，也因为它位于欧洲，还因为它只支持ipv6，所以访问它相当累人。在上面架web站已经折腾过一次了，我实在不想为了邮件再折腾它一回。因为那意味着要装软件，要配置，安装过程可能各种意外中断，搞不好就把现在还能服务的web搞挂了，要真那样，就太得不偿失了。&lt;/p&gt;
&lt;p&gt;一个可行的折腾方案是直接在自己的电脑上先试。&lt;/p&gt;
&lt;h2&gt;过程&lt;/h2&gt;
&lt;p&gt;最先想到的就是通过那些免费的webmail服务的smtp来发邮件，当然马上就发现是不行的。也许时间往上推20多年是可能的，但这些年垃圾邮件越来越猖狂，邮件服务商最基本的要求就是防止有人乱发邮件。你不付钱把你的域名托给邮件服务商代管理，你就不可能用他们的smtp服务器发你自己域名的邮件。&lt;/p&gt;
&lt;p&gt;那自己架一个smtp服务器呢？对于使用动态ip的家庭用户来说，有可能做到，但别指望它能稳定工作。由于我平时使用linux，所以我搜了一下，决定使用最多人用的exim4来发邮件。&lt;/p&gt;
&lt;p&gt;exim4的安装和配置都还算方便，装完之后我成功地使用mail这个命令在terminal环境里发出了邮件，但是......&lt;/p&gt;
&lt;p&gt;几个我至今无法解决的问题。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我发出的邮件会被认为是垃圾邮件(Spam)，因为我的域名和被CF托管的DNS中注册的不一致，属于不可信的，因此虽然别人能收到，但通常都会在他的垃圾邮件箱里。&lt;/li&gt;
&lt;li&gt;为了做试验，我曾经手工停掉了exim4的服务，但我发现用mail命令照样发出了邮件，查exim4的日志也能看到，说明mail工作的时候会直接调用exim4，哪怕作为后台服务已经被停掉了。&lt;/li&gt;
&lt;li&gt;我只能用mail在命令行发纯文本的邮件。我不知道该怎么设置邮件图形客户端使得它能像命令行的mail那样替我把邮件发出去，最好是HTML格式的，能图文并茂，能附加附件。但是我不能，我就找不到一个不需要设置smtp就能发邮件的邮件客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;结尾&lt;/h2&gt;
&lt;p&gt;我还会继续试验下去，直到我把前面的那几个问题解决掉。或者就这样，反正邮件并不是必须的，对么？&lt;/p&gt;
&lt;p&gt;就先到这里。&lt;/p&gt;
&lt;p&gt;后续更新：&lt;/p&gt;
&lt;p&gt;之后我又在其它vps上尝试了一回，这回失败得更彻底，但原因也更简单，就是服务商不给你收发邮件。看来邮件服务现在不算是个受欢迎的东西，至少不像Web服务那样成为vps服务的标配。要使用邮件服务是有门槛的，想悄悄设立一个无成本的邮件服务应该是不太可能的了。&lt;/p&gt;
&lt;p&gt;&lt;a href="/"&gt;回主页&lt;/a&gt;&lt;/p&gt;</content><category term="IT,Network"></category></entry><entry><title>使用 WireGuard 搭建私有网络</title><link href="https://www.zeusinolympia.eu.org/shi-yong-wireguard-da-jian-si-you-wang-luo.html" rel="alternate"></link><published>2021-07-15T15:42:00+08:00</published><updated>2021-07-15T15:42:00+08:00</updated><author><name>bbb</name></author><id>tag:www.zeusinolympia.eu.org,2021-07-15:/shi-yong-wireguard-da-jian-si-you-wang-luo.html</id><summary type="html">&lt;p&gt;以下文字都是网上搬运过来的，原始链接是&lt;a href="https://blog.gimo.me/post/setup-wireguard-vpn/"&gt;这个&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;在上篇日记中讲到了自建 vaultwarden 密码管理软件的经过，虽然过程一帆风 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;以下文字都是网上搬运过来的，原始链接是&lt;a href="https://blog.gimo.me/post/setup-wireguard-vpn/"&gt;这个&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;在上篇日记中讲到了自建 vaultwarden 密码管理软件的经过，虽然过程一帆风顺不过还是不太希望这个服务在公网上被访问到，毕竟实际上只有我一个人在使用，我得选一种方法让别人没法访问。方法其实有不少，比如配置 NGINX 让它只能接受指定 IP 地址的访问，不过不管家里也好，移动设备也好都没有固定 IP，如果要用这个方法的话，我首先得搭建一个代理服务器拿到一个固定的 IP 地址才行，与其如此我不如搭建一个私有网络，把我用到的几个设备连接到这一个虚拟网络中，这样不仅可以实现只让我访问服务的目标，还能带来其他一些好处，比如哪天开始需要去公司上班了，我可以连回家里的设备。&lt;/p&gt;
&lt;p&gt;于是想到了早就听说却一直没有用过的 WireGuard。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;WireGuard&lt;/h2&gt;
&lt;p&gt;如果用谷歌搜索 WireGuard，结果里官网的标题应该很好地形容这个软件 &lt;a href="https://www.wireguard.com/"&gt;WireGuard: fast, modern, secure VPN tunnel&lt;/a&gt; ，基本上它分为两部分，一个内核模块和一个用户空间工具，因为我的 VPS 和我的电脑都是使用的 Arch 的 &lt;a href="https://archlinux.org/packages/core/x86_64/linux/"&gt;linux&lt;/a&gt; 内核，它已经自带了编译好的 WireGuard 内核模块， 所以只需要安装一个 &lt;a href="https://archlinux.org/packages/extra/x86_64/wireguard-tools/"&gt;wireguard-tools&lt;/a&gt; 工具即可使用。如果内核版本低于 5.6 需要额外安装对应的内核模块包(其他发行版或者其他内核用户需要各自对应)。另外按照 Arch Wiki 上的介绍，systemd-networkd 和 NetworkManager 自带了对 WireGuard 的支持，应该不安装 wireguard-tools 也能使用。&lt;/p&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;实际上 WireGuard 里并没有 server，client 之类的概念区分，所有的节点都叫做 peer，每个设备在联入之前都需要生成一个私钥（公钥可以通过私钥导出），而 VPN Server 实际上算是一种特例，Arch 的 Wiki 里直接给出了这种配置方案的示例，基本稍作修改就能使用。就我而言，我是想让之前搭建的 bitwarden_rs 服务在内网中使用，我就把那台 VPS 作为 "server" 的角色来使用了。&lt;/p&gt;
&lt;p&gt;每个设备生成私钥、公钥的方式都一样，通过下面的方式可以一次生成。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wg&lt;span class="w"&gt; &lt;/span&gt;genkey&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tee&lt;span class="w"&gt; &lt;/span&gt;peer_A.key&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wg&lt;span class="w"&gt; &lt;/span&gt;pubkey&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;peer_A.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因为我使用的是 wireguard-tools 里的工具进行配置的，所以接下来就是创建配置文件，在我那台 VPS 里的配置大概如下，其实就是 “Server” 在 Interface 里指定好对应的网段，和自己的私钥即可，Peer 里则通过其他 "Client" 设备的公钥来确定身份，我在这里配置了三台设备分别是我的手机和两台电脑，其中的 AllowedIPs 指的是 “Server” 可以路由到 "Client" 的哪些 IP 段（会因此创建不同的路由表），这里我们近需要这台 Server 能访问其他设备本身即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="na"&gt;❯ sudo cat /etc/wireguard/wg0.conf                      &lt;/span&gt;
&lt;span class="k"&gt;[Interface]&lt;/span&gt;
&lt;span class="na"&gt;ListenPort&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;51820&lt;/span&gt;
&lt;span class="na"&gt;PrivateKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;“Server” 的私钥&lt;/span&gt;
&lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;192.168.77.1/24&lt;/span&gt;

&lt;span class="k"&gt;[Peer]&lt;/span&gt;
&lt;span class="c1"&gt;# Redmi K30&lt;/span&gt;
&lt;span class="na"&gt;PublicKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;手机的公钥&lt;/span&gt;
&lt;span class="na"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;192.168.77.51/32&lt;/span&gt;

&lt;span class="k"&gt;[Peer]&lt;/span&gt;
&lt;span class="c1"&gt;# XPS 9370&lt;/span&gt;
&lt;span class="na"&gt;PublicKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;笔记本的公钥&lt;/span&gt;
&lt;span class="na"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;192.168.77.52/32&lt;/span&gt;

&lt;span class="k"&gt;[Peer]&lt;/span&gt;
&lt;span class="c1"&gt;# ArchLinux Desktop&lt;/span&gt;
&lt;span class="na"&gt;PublicKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;台式机的公钥&lt;/span&gt;
&lt;span class="na"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;192.168.77.53/32&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;而对应的我的一台电脑的配置则如下，其中加入了 &lt;code&gt;Endpoint&lt;/code&gt; 和 &lt;code&gt;PersistentKeepalive&lt;/code&gt; 这两个配置，因为我的笔记本并没有单独的外网 IP，所以这里需要指定“Server”的地址和端口，并保持心跳。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Interface]&lt;/span&gt;
&lt;span class="na"&gt;PrivateKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;笔记本的私钥&lt;/span&gt;
&lt;span class="na"&gt;Address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;192.168.77.52/32&lt;/span&gt;

&lt;span class="k"&gt;[Peer]&lt;/span&gt;
&lt;span class="na"&gt;PublicKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;“Server” 的公钥&lt;/span&gt;
&lt;span class="na"&gt;AllowedIPs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;192.168.77.1/32&lt;/span&gt;
&lt;span class="na"&gt;Endpoint&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;tokyo-1.gimo.me:51820&lt;/span&gt;
&lt;span class="na"&gt;PersistentKeepalive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;启动服务&lt;/h3&gt;
&lt;p&gt;假设配置文件在 &lt;code&gt;/etc/wireguard/wg0.conf&lt;/code&gt; 的话，通过下面的命令即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;wg-quick&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;wg0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果需要开机自启，则可以&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wg-quick@wg0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;查看状态&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;wg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# 相当于 sudo wg show&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;可以查看各个节点的配置和最后握手时间以及传输流量。&lt;/p&gt;
&lt;h2&gt;其他配置&lt;/h2&gt;
&lt;h3&gt;NGINX&lt;/h3&gt;
&lt;p&gt;为了不让 NGINX 不在公网上被访问，直接修改配置文件将监听地址绑定到 wg0 的网段上，像是下面那样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;listen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;192.168.77.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;listen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;192.168.77.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;http2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;VPS 出入站规则&lt;/h3&gt;
&lt;p&gt;关闭之前开放的 80、443 端口，仅仅保留 ssh、mosh、和 WireGuard 的 51820 端口。&lt;/p&gt;
&lt;h2&gt;OpenWrt&lt;/h2&gt;
&lt;p&gt;到此基本就实现我的目的了，如果手机上需要访问这个服务直接打开 WireGuard 的 VPN 即可，不过考虑到因为 WFH 其实出门的机会也并不大，在家里我希望不连 VPN 就能访问，于是想在家里的路由器也用上 WireGuard，这里多亏了老婆把我的 NanoPi R2S 给带来了日本，我刷入了&lt;a href="http://wiki.friendlyarm.com/wiki/index.php/NanoPi_R2S#Install_OS"&gt;官网最新的 ROM&lt;/a&gt; 之后（也是巧了，它正好在半个月前更新了内核到 5.10）查看了一下，它自带了 wireguard 内核模块，一阵窃喜。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;root@FriendlyWrt:~#&lt;span class="w"&gt; &lt;/span&gt;modinfo&lt;span class="w"&gt; &lt;/span&gt;wireguard
module:&lt;span class="w"&gt;         &lt;/span&gt;/lib/modules/5.10.2/wireguard.ko
alias:&lt;span class="w"&gt;          &lt;/span&gt;net-pf-16-proto-16-family-wireguard
alias:&lt;span class="w"&gt;          &lt;/span&gt;rtnl-link-wireguard
version:&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.0
author:&lt;span class="w"&gt;         &lt;/span&gt;Jason&lt;span class="w"&gt; &lt;/span&gt;A.&lt;span class="w"&gt; &lt;/span&gt;Donenfeld&lt;span class="w"&gt; &lt;/span&gt;&amp;lt;Jason@zx2c4.com&amp;gt;
description:&lt;span class="w"&gt;    &lt;/span&gt;WireGuard&lt;span class="w"&gt; &lt;/span&gt;secure&lt;span class="w"&gt; &lt;/span&gt;network&lt;span class="w"&gt; &lt;/span&gt;tunnel
license:&lt;span class="w"&gt;        &lt;/span&gt;GPL&lt;span class="w"&gt; &lt;/span&gt;v2
srcversion:&lt;span class="w"&gt;     &lt;/span&gt;F50E590B3528AEDDC1F8C5D
depends:&lt;span class="w"&gt;        &lt;/span&gt;libcurve25519-generic,libblake2s,udp_tunnel,libchacha20poly1305,ip6_udp_tunnel
intree:&lt;span class="w"&gt;         &lt;/span&gt;Y
name:&lt;span class="w"&gt;           &lt;/span&gt;wireguard
vermagic:&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.10.2&lt;span class="w"&gt; &lt;/span&gt;SMP&lt;span class="w"&gt; &lt;/span&gt;preempt&lt;span class="w"&gt; &lt;/span&gt;mod_unload&lt;span class="w"&gt; &lt;/span&gt;modversions&lt;span class="w"&gt; &lt;/span&gt;aarch64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;不过没有自动装载这个模块，直接 &lt;code&gt;modprobe wireguard&lt;/code&gt;，然后创建 &lt;code&gt;/etc/modules.d/wireguard&lt;/code&gt; 让它自动装载。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;root@FriendlyWrt:~#&lt;span class="w"&gt; &lt;/span&gt;cat&lt;span class="w"&gt; &lt;/span&gt;/etc/modules.d/wireguard&lt;span class="w"&gt; &lt;/span&gt;
wireguard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后打开 &lt;a href="https://openwrt.org/docs/guide-user/services/vpn/wireguard/start"&gt;OpenWrt 的 WireGuard 文档&lt;/a&gt;，显示安装两个包即可  &lt;a href="https://openwrt.org/packages/pkgdata/luci-proto-wireguard"&gt;luci-proto-wireguard&lt;/a&gt; 和 &lt;a href="https://openwrt.org/packages/pkgdata/luci-app-wireguard"&gt;luci-app-wireguard&lt;/a&gt;，第一个是用于创建接口时可以选择 WireGuard 协议，第二个提供一个图形界面查看状态。然而我实际安装的时候失败了，报错找不到依赖 &lt;code&gt;kmod-wireguard&lt;/code&gt;，我当然不理它，毕竟我已经知道 friendlywrt 提供的内核自带了 wireguard 内核模块，直接大胆地&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;opkg&lt;span class="w"&gt; &lt;/span&gt;update
opkg&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;luci-proto-wireguard&lt;span class="w"&gt; &lt;/span&gt;luci-app-wireguard&lt;span class="w"&gt; &lt;/span&gt;--force-depends
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;接下来就是用 luci 的图形界面创建一个 &lt;code&gt;WireGuard VPN&lt;/code&gt; 协议的接口 wg0，配置和之前的其他手机、电脑的配置相似，然后把公钥加到”Server“的配置里。不过因为内网的其他设备需要通过这台路由器的 wg0 接口访问“Server”（这样在家里的其他设备就不用连 VPN 访问自建的 bitwarden_rs 啦）还需要配置下路由器的防火墙，主要是加一条&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;iptables -t nat -A POSTROUTING -o wg0 -j MASQUERADE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;最后&lt;/h2&gt;
&lt;p&gt;现在只要连上家里的 Wi-Fi 就可以访问我自建的 bitwarden_rs 服务了，如果偶尔外出需要使用再单独连接 VPN 即可。不过我仔细想一想我的路由器似乎性能挺过剩的，完全可以把它作为”Server“，似乎 bitwarden_rs 也有 aarch64 架构的镜像，部署在路由器上想必也不是什么难事，如果这么做的话改动一下相应的 WireGuard 配置应该也不太难。&lt;/p&gt;
&lt;h2&gt;LT;DR&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;我：（发了一个链接给妻子）你看看我刚给你发了个链接，你是不是打不开？但是我能打开，因为我手机上连了&lt;span class="w"&gt; &lt;/span&gt;VPN。
妻：哦

（数日后）

我：你看看之前给你发的那个链接是不是能打开了？
妻：嗯
我：你把&lt;span class="w"&gt; &lt;/span&gt;Wi-Fi&lt;span class="w"&gt; &lt;/span&gt;断了，用流量再打开试试，是不是就打不开了？
妻：嗯
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;问题&lt;/h2&gt;
&lt;p&gt;本人在使用一段时间后发现，网络出现一些奇怪的问题，比如提交 HTML 表单的时候和服务器之间的通讯会中断，通过一番调查一般是因为默认的 MTU 值（1420）过大造成的，至于合适的 MTU 值取决于各自的网络状况，一般来说遇到这个问题把 MTU 调小即可，比如我把路由器上 wg0 的 MTU 调整成 1280 就一切顺利了。&lt;/p&gt;
&lt;p&gt;&lt;a href="/"&gt;回主页&lt;/a&gt;&lt;/p&gt;</content><category term="IT,Network"></category></entry></feed>